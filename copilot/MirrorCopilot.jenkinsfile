pipeline {
  agent any

   options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    skipDefaultCheckout true
  }

  tools {
    maven 'apache-maven-latest'
    jdk 'temurin-jdk21-latest'
  }

  environment {
    PUBLISH_LOCATION = 'copilot'
  }

  parameters {
    choice(
      name: 'BUILD_TYPE',
      choices: ['nightly', 'milestone', 'release'],
      description: '''
        Choose the type of build.
        Note that a release build will not promote the build, but rather will promote the most recent milestone build.
        '''
    )

    string(
      name: 'COPILOT_URL',
      defaultValue: 'https://azuredownloads-g3ahgwb5b8bkbxhd.b01.azurefd.net/eclipse-copilot-repository/staging/0.10.1',
      description: '''
        Specify the Copilot URL to mirror.
        '''
    )

    booleanParam(
      name: 'PROMOTE',
      defaultValue: false,
      description: 'Whether to promote the build to the download server.'
    )
  }

  stages {
    stage('Display Parameters') {
      steps {
        script {
          def description = """
BUILD_TYPE=${params.BUILD_TYPE}
PROMOTE=${params.PROMOTE}
COPILOT_URL=${params.COPILOT_URL}
""".trim()
          echo description
          currentBuild.description = description.replace("\n", "<br/>")
          env.PROMOTE = params.PROMOTE
          env.BUILD_TYPE = params.BUILD_TYPE
          env.COPILOT_URL = params.COPILOT_URL
        }
      }
    }

    stage('Initialize PGP') {
      steps {
        withCredentials([file(credentialsId: 'secret-subkeys.asc', variable: 'KEYRING')]) {
         sh '''
           gpg --batch --import "${KEYRING}"
           for fpr in $(gpg --list-keys --with-colons  | awk -F: \'/fpr:/ {print $10}\' | sort -u); do echo -e "5\ny\n" |  gpg --batch --command-fd 0 --expert --edit-key ${fpr} trust; done
           '''
        }
      }
    }

    stage('Git Checkout') {
      steps {
        script {
          /*
            https://qxf2.com/blog/jenkins-sparse-checkout/
            https://plugins.jenkins.io/git/ 
          */
          def gitVariables = checkout(
            poll: false,
            scm: [
              $class: 'GitSCM',
              branches: [[name: '*/master']],
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              extensions: [
                [$class: 'CloneOption', shallow: true],
                [$class: 'SparseCheckoutPaths', sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'copilot/']]]
              ],
              userRemoteConfigs: [[url: 'https://github.com/eclipse-oomph/oomph.incubator.git' ]] 
            ]
          )

          echo "$gitVariables"
          env.GIT_COMMIT = gitVariables.GIT_COMMIT
        }
      }
    }

    stage('Build Copilot Updates') {
      steps {
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
          dir('copilot') {
            withCredentials([string(credentialsId: 'gpg-passphrase', variable: 'KEYRING_PASSPHRASE')]) {
              sh '''
                if [[ $PROMOTE == false ]]; then
                  promotion_argument='-Dorg.eclipse.justj.p2.manager.args='
                fi
                mvn \
                  --no-transfer-progress \
                  $promotion_argument \
                  -Pgpg-sign \
                  -Dgpg.passphrase="${KEYRING_PASSPHRASE}" \
                  -Dorg.eclipse.justj.p2.manager.build.url=$JOB_URL \
                  -Dcopilot-url=$COPILOT_URL \
                  -Dorg.eclipse.justj.p2.manager.relative=$PUBLISH_LOCATION \
                  -Dbuild.type=$BUILD_TYPE \
                  clean \
                  verify
                '''
            }
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts '**'
    }

    failure {
      mail to: 'ed.merks@gmail.com',
      subject: "[Oomph CI] Build Failure ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    fixed {
      mail to: 'ed.merks@gmail.com',
      subject: "[Oomph CI] Back to normal ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    cleanup {
      deleteDir()
    }
  }
}